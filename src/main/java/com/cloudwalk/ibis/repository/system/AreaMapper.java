/**
 * Copyright @ 2015-2018 重庆中科云丛科技有限公司  All Rights Reserved.
 *
 * This file is automatically generated by MyBatis Generator, do not modify.
 * MyBatis Generator was modified by FUNDSTAR team, if you have any questions please contact with author.
 * Project Name: FundStar
 * File Name: AreaMapper.java
 * Creat Date: 2015-08-15 11:30:16
 */
package com.cloudwalk.ibis.repository.system;

import java.util.List;
import java.util.Map;

import org.springframework.cache.annotation.CachePut;
import org.springframework.dao.DataAccessException;

import com.cloudwalk.ibis.model.system.Area;
import com.google.code.ssm.api.InvalidateSingleCache;
import com.google.code.ssm.api.ParameterValueKeyProvider;
import com.google.code.ssm.api.ReadThroughMultiCache;
import com.google.code.ssm.api.ReadThroughSingleCache;
import com.google.code.ssm.api.UpdateSingleCache;

/**
 * Class Name: AreaMapper <br>
 * Description: This interface corresponds to the table - FND_AREA <br>
 * Create Date: 2015-08-15 11:30:16 <br>
 */
public interface AreaMapper {
    /**
     * Method: deleteByPrimaryKey(...) <br/>
	 *	 Delete record from table - FND_AREA<br/>
	 * Param: areaId (区域代码) , the paremeter can not empty. <br/>
	 * Description: <br/>
	 *	 1: This method corresponds to the database table FND_AREA<br/>
	 *	 2: AreaService call this method, then the realization method calls AreaMapper.xml to delete from database.<br/>
	 *	 3: throws DataAccessException exception <br/>
     * Remarks: If the method executed successfully, need to be removed Area object from memory cache 
     * Create Date: 2015-08-15 11:30:16
     */
    @InvalidateSingleCache(namespace = "Area")
    int deleteByPrimaryKey(@ParameterValueKeyProvider Long areaId) throws DataAccessException;

    /**
     * Method: insertSelective(...) <br/>
	 *	 Insert a record to table - FND_AREA<br/>
     * Param: record, the paremeter can not empty, for details please to see Area.java model file.<br/>
     * Description: <br/>
	 *	 1: This method corresponds to the database table FND_AREA<br/>
	 *	 2: AreaService call this method, then the realization method calls AreaMapper.xml to add record into database.<br/>
	 *	 3: throws DataAccessException exception <br/>
     * Create Date: 2015-08-15 11:30:16
     */
    @CachePut(value = "Area")
    int insertSelective(Area record) throws DataAccessException;

    /**
     * Method: selectByPrimaryKey(...) <br/>
	 *	 Select a record from table - FND_AREA <br/>
	 * Param: areaId (区域代码) , the paremeter can not empty. <br/>
	 * Description: <br/>
	 *	 1: This method corresponds to the database table FND_AREA <br/>
	 *	 2: AreaService call this method, then the realization method calls AreaMapper.xml to get record from database. <br/>
	 *	 3: @ReadThroughSingleCache(namespace = "cache object name", expiration = cache expiration time(s) ) <br/>
	 *	 4: throws DataAccessException exception <br/>
     * Remarks: When the query set, first get Area correspondence from the cache, such as the cache does not exist, <br/>
	 *		 then the query from the database, and stores the results into the cache.
     * Create Date: 2015-08-15 11:30:16
     */
    @ReadThroughSingleCache(namespace ="Area", expiration = 30)
    Area selectByPrimaryKey(Long areaId) throws DataAccessException;

    /**
     * Method: updateByPrimaryKeySelective(...) <br/>
	 *	 Update record by primary key to table - FND_AREA<br/>
     * Param: record, the paremeter can not empty, for details please to see Area.java model file.<br/>
     * Description: <br/>
	 *	 1: This method corresponds to the database table FND_AREA<br/>
	 *	 2: AreaService call this method, then the realization method calls AreaMapper.xml to add record into database.<br/>
	 *	 3: @UpdateSingleCache(namespace = "cache object name", expiration = cache expiration time(s) ) <br/>
	 *	 4: throws DataAccessException exception <br/>
     * Create Date: 2015-08-15 11:30:16
     */
    @UpdateSingleCache(namespace = "Area", expiration = 30)
    int updateByPrimaryKeySelective(Area record) throws DataAccessException;

    /**
     * Method: selectAll(...) <br/>
	 *	 Select some records from table - FND_AREA <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return all records<br/>
	 * Description: <br/>
	 *	 1: This method corresponds to the database table FND_AREA <br/>
	 *	 2: AreaService call this method, then the realization method calls AreaMapper.xml to get record from database. <br/>
	 *	 3: @ReadThroughMultiCache(namespace = "cache object name", expiration = cache expiration time(s) ) <br/>
	 *	 4: throws DataAccessException exception <br/>
     * Remarks: When the query set, first get Area correspondence from the cache, such as the cache does not exist, <br/>
	 *		 then the query from the database, and stores the results into the cache.
     * Create Date: 2015-08-15 11:30:16
     */
    @ReadThroughMultiCache(namespace ="Area", expiration = 30)
    List<Area> selectAll(Area record) throws DataAccessException;

    /**
     * Method: selectAllByPage(...) <br/>
	 *	 Select some records from table by page- FND_AREA <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return all records<br/>
	 * Description: <br/>
	 *	 1: This method corresponds to the database table FND_AREA <br/>
	 *	 2: AreaService call this method, then the realization method calls AreaMapper.xml to get record from database. <br/>
	 *	 3: @ReadThroughMultiCache(namespace = "cache object name", expiration = cache expiration time(s) ) <br/>
	 *	 4: throws DataAccessException exception <br/>
     * Remarks: When the query set, first get Area correspondence from the cache, such as the cache does not exist, <br/>
	 *		 then the query from the database, and stores the results into the cache.
     * Create Date: 2015-08-15 11:30:16
     */
    @ReadThroughMultiCache(namespace ="Area", expiration = 30)
    List<Area> selectAllByPage(Map<String, Object> map) throws DataAccessException;

    /**
     * Method: searchAll(...) <br/>
	 *	 Select some records from table - FND_AREA <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return all records<br/>
	 * Description: <br/>
	 *	 1: This method corresponds to the database table FND_AREA <br/>
	 *	 2: AreaService call this method, then the realization method calls AreaMapper.xml to get record from database. <br/>
	 *	 3: @ReadThroughMultiCache(namespace = "cache object name", expiration = cache expiration time(s) ) <br/>
	 *	 4: throws DataAccessException exception <br/>
     * Remarks: When the query set, first get Area correspondence from the cache, such as the cache does not exist, <br/>
	 *		 then the query from the database, and stores the results into the cache.
     * Create Date: 2015-08-15 11:30:16
     */
    @ReadThroughMultiCache(namespace ="Area", expiration = 30)
    List<Area> searchAll(Area record) throws DataAccessException;

    /**
     * Method: searchAllByPage(...) <br/>
	 *	 Select some records from table by page- FND_AREA <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return all records<br/>
	 * Description: <br/>
	 *	 1: This method corresponds to the database table FND_AREA <br/>
	 *	 2: AreaService call this method, then the realization method calls AreaMapper.xml to get record from database. <br/>
	 *	 3: @ReadThroughMultiCache(namespace = "cache object name", expiration = cache expiration time(s) ) <br/>
	 *	 4: throws DataAccessException exception <br/>
     * Remarks: When the query set, first get Area correspondence from the cache, such as the cache does not exist, <br/>
	 *		 then the query from the database, and stores the results into the cache.
     * Create Date: 2015-08-15 11:30:16
     */
    @ReadThroughMultiCache(namespace ="Area", expiration = 30)
    List<Area> searchAllByPage(Map<String, Object> map) throws DataAccessException;

    /**
     * Method: selectCount(...) <br/>
	 *	 Select some records count from table - FND_AREA <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return all records count<br/>
	 * Description: <br/>
	 *	 1: This method corresponds to the database table FND_AREA <br/>
	 *	 2: AreaService call this method, then the realization method calls AreaMapper.xml to get record from database. <br/>
	 *	 3: @ReadThroughMultiCache(namespace = "cache object name", expiration = cache expiration time(s) ) <br/>
	 *	 4: throws DataAccessException exception <br/>
     * Remarks: When the query set, first get Area correspondence from the cache, such as the cache does not exist, <br/>
	 *		 then the query from the database, and stores the results into the cache.
     * Create Date: 2015-08-15 11:30:16
     */
    int selectCount(Area record) throws DataAccessException;
}