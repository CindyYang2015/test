/**
 * Copyright @ 2014-2016 上海企垠信息科技有限公司  All Rights Reserved.
 *
 * This file is automatically generated by MyBatis Generator, do not modify.
 * MyBatis Generator was modified by FUNDSTAR team, if you have any questions please contact with author.
 * Project Name: FundStar
 * File Name: LogOperMapper.java
 * Creat Date: 2015-08-31 17:50:30
 */
package com.cloudwalk.ibis.repository.system;

import java.util.List;
import java.util.Map;

import org.springframework.cache.annotation.CachePut;
import org.springframework.dao.DataAccessException;

import com.cloudwalk.ibis.model.system.LogOper;
import com.google.code.ssm.api.ReadThroughMultiCache;

/**
 * Class Name: LogOperMapper <br>
 * Description: This interface corresponds to the table - FND_LOG_OPER <br>
 * Create Date: 2015-08-31 17:50:30 <br>
 */
public interface LogOperMapper {
	/**
	 * Method: insertSelective(...) <br/>
	 * Insert a record to table - FND_LOG_OPER<br/>
	 * Param: record, the paremeter can not empty, for details please to see
	 * LogOper.java model file.<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_LOG_OPER<br/>
	 * 2: LogOperService call this method, then the realization method calls
	 * LogOperMapper.xml to add record into database.<br/>
	 * 3: throws DataAccessException exception <br/>
	 * Create Date: 2015-08-31 17:50:30
	 */
	@CachePut(value = "LogOper")
	int insertSelective(LogOper record) throws DataAccessException;

	/**
	 * Method: searchAll(...) <br/>
	 * Select some records from table - FND_LOG_OPER <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_LOG_OPER <br/>
	 * 2: LogOperService call this method, then the realization method calls
	 * LogOperMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get LogOper correspondence from the
	 * cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-31 17:50:30
	 */
	@ReadThroughMultiCache(namespace = "LogOper", expiration = 30)
	List<LogOper> searchAll(LogOper record) throws DataAccessException;

	/**
	 * Method: searchAllByPage(...) <br/>
	 * Select some records from table by page- FND_LOG_OPER <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_LOG_OPER <br/>
	 * 2: LogOperService call this method, then the realization method calls
	 * LogOperMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get LogOper correspondence from the
	 * cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-31 17:50:30
	 */
	@ReadThroughMultiCache(namespace = "LogOper", expiration = 30)
	List<LogOper> searchAllByPage(Map<String, Object> map) throws DataAccessException;

	/**
	 * Method: selectAll(...) <br/>
	 * Select some records from table - FND_LOG_OPER <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_LOG_OPER <br/>
	 * 2: LogOperService call this method, then the realization method calls
	 * LogOperMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get LogOper correspondence from the
	 * cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-31 17:50:30
	 */
	@ReadThroughMultiCache(namespace = "LogOper", expiration = 30)
	List<LogOper> selectAll(LogOper record) throws DataAccessException;

	/**
	 * Method: selectAllByPage(...) <br/>
	 * Select some records from table by page- FND_LOG_OPER <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_LOG_OPER <br/>
	 * 2: LogOperService call this method, then the realization method calls
	 * LogOperMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get LogOper correspondence from the
	 * cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-31 17:50:30
	 */
	@ReadThroughMultiCache(namespace = "LogOper", expiration = 30)
	List<LogOper> selectAllByPage(Map<String, Object> map) throws DataAccessException;

	/**
	 * Method: selectCount(...) <br/>
	 * Select some records count from table - FND_LOG_OPER <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records count<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_LOG_OPER <br/>
	 * 2: LogOperService call this method, then the realization method calls
	 * LogOperMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get LogOper correspondence from the
	 * cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-31 17:50:30
	 */
	int selectCount(LogOper record) throws DataAccessException;
}