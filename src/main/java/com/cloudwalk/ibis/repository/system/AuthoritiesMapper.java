/**
 * Copyright @ 2015-2018 重庆中科云丛科技有限公司  All Rights Reserved.
 *
 * This file is automatically generated by MyBatis Generator, do not modify.
 * MyBatis Generator was modified by FUNDSTAR team, if you have any questions please contact with author.
 * Project Name: FundStar
 * File Name: AuthoritiesMapper.java
 * Creat Date: 2015-08-15 11:30:16
 */
package com.cloudwalk.ibis.repository.system;

import java.util.List;
import java.util.Map;

import org.springframework.cache.annotation.CachePut;
import org.springframework.dao.DataAccessException;

import com.cloudwalk.ibis.model.system.Authorities;
import com.google.code.ssm.api.InvalidateSingleCache;
import com.google.code.ssm.api.ParameterValueKeyProvider;
import com.google.code.ssm.api.ReadThroughMultiCache;
import com.google.code.ssm.api.ReadThroughSingleCache;
import com.google.code.ssm.api.UpdateSingleCache;

/**
 * Class Name: AuthoritiesMapper <br>
 * Description: This interface corresponds to the table - FND_AUTHORITIES <br>
 * Create Date: 2015-08-15 11:30:16 <br>
 */
public interface AuthoritiesMapper {
	int batchUpdate(List<Authorities> authorities) throws DataAccessException;

	/**
	 * Method: deleteByPrimaryKey(...) <br/>
	 * Delete record from table - FND_AUTHORITIES<br/>
	 * Param: authorityId (权限ID) , the paremeter can not empty. <br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_AUTHORITIES<br/>
	 * 2: AuthoritiesService call this method, then the realization method calls
	 * AuthoritiesMapper.xml to delete from database.<br/>
	 * 3: throws DataAccessException exception <br/>
	 * Remarks: If the method executed successfully, need to be removed
	 * Authorities object from memory cache Create Date: 2015-08-15 11:30:16
	 */
	@InvalidateSingleCache(namespace = "Authorities")
	int deleteByPrimaryKey(@ParameterValueKeyProvider String authorityId)
			throws DataAccessException;

	/**
	 * Method: insertSelective(...) <br/>
	 * Insert a record to table - FND_AUTHORITIES<br/>
	 * Param: record, the paremeter can not empty, for details please to see
	 * Authorities.java model file.<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_AUTHORITIES<br/>
	 * 2: AuthoritiesService call this method, then the realization method calls
	 * AuthoritiesMapper.xml to add record into database.<br/>
	 * 3: throws DataAccessException exception <br/>
	 * Create Date: 2015-08-15 11:30:16
	 */
	@CachePut(value = "Authorities")
	int insertSelective(Authorities record) throws DataAccessException;

	int insertSelectiveBatch(List<Authorities> items)
			throws DataAccessException;

	/**
	 * Method: searchAll(...) <br/>
	 * Select some records from table - FND_AUTHORITIES <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_AUTHORITIES <br/>
	 * 2: AuthoritiesService call this method, then the realization method calls
	 * AuthoritiesMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get Authorities correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	@ReadThroughMultiCache(namespace = "Authorities", expiration = 30)
	List<Authorities> searchAll(Authorities record)
			throws DataAccessException;

	/**
	 * Method: searchAllByPage(...) <br/>
	 * Select some records from table by page- FND_AUTHORITIES <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_AUTHORITIES <br/>
	 * 2: AuthoritiesService call this method, then the realization method calls
	 * AuthoritiesMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get Authorities correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	@ReadThroughMultiCache(namespace = "Authorities", expiration = 30)
	List<Authorities> searchAllByPage(Map<String, Object> map)
			throws DataAccessException;

	/**
	 * Method: selectAll(...) <br/>
	 * Select some records from table - FND_AUTHORITIES <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_AUTHORITIES <br/>
	 * 2: AuthoritiesService call this method, then the realization method calls
	 * AuthoritiesMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get Authorities correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	@ReadThroughMultiCache(namespace = "Authorities", expiration = 30)
	List<Authorities> selectAll(Authorities record)
			throws DataAccessException;

	/**
	 * Method: selectAllByPage(...) <br/>
	 * Select some records from table by page- FND_AUTHORITIES <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_AUTHORITIES <br/>
	 * 2: AuthoritiesService call this method, then the realization method calls
	 * AuthoritiesMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get Authorities correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	@ReadThroughMultiCache(namespace = "Authorities", expiration = 30)
	List<Authorities> selectAllByPage(Map<String, Object> map)
			throws DataAccessException;

	List<Authorities> selectAuthsByAuthNames(Map<String,Object> map)
			throws DataAccessException;

	/**
	 * Method: selectByPrimaryKey(...) <br/>
	 * Select a record from table - FND_AUTHORITIES <br/>
	 * Param: authorityId (权限ID) , the paremeter can not empty. <br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_AUTHORITIES <br/>
	 * 2: AuthoritiesService call this method, then the realization method calls
	 * AuthoritiesMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughSingleCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get Authorities correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	@ReadThroughSingleCache(namespace = "Authorities", expiration = 30)
	Authorities selectByPrimaryKey(String authorityId)
			throws DataAccessException;

	/**
	 * Method: selectCount(...) <br/>
	 * Select some records count from table - FND_AUTHORITIES <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records count<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_AUTHORITIES <br/>
	 * 2: AuthoritiesService call this method, then the realization method calls
	 * AuthoritiesMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get Authorities correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	int selectCount(Authorities record) throws DataAccessException;

	List<Authorities> selectGroupAuthsByGroupIds(List<String> groupIdList)
			throws DataAccessException;

	/**
	 * Method: updateByPrimaryKeySelective(...) <br/>
	 * Update record by primary key to table - FND_AUTHORITIES<br/>
	 * Param: record, the paremeter can not empty, for details please to see
	 * Authorities.java model file.<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_AUTHORITIES<br/>
	 * 2: AuthoritiesService call this method, then the realization method calls
	 * AuthoritiesMapper.xml to add record into database.<br/>
	 * 3: @UpdateSingleCache(namespace = "cache object name", expiration = cache
	 * expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Create Date: 2015-08-15 11:30:16
	 */
	@UpdateSingleCache(namespace = "Authorities", expiration = 30)
	int updateByPrimaryKeySelective(Authorities record)
			throws DataAccessException;
}