/**
 * Copyright @ 2015-2018 重庆中科云丛科技有限公司  All Rights Reserved.
 *
 * This file is automatically generated by MyBatis Generator, do not modify.
 * MyBatis Generator was modified by FUNDSTAR team, if you have any questions please contact with author.
 * Project Name: FundStar
 * File Name: UserGroupRefMapper.java
 * Creat Date: 2015-08-15 11:30:16
 */
package com.cloudwalk.ibis.repository.system;

import java.util.List;
import java.util.Map;

import org.springframework.cache.annotation.CachePut;
import org.springframework.dao.DataAccessException;

import com.cloudwalk.ibis.model.system.UserGroupRefKey;
import com.google.code.ssm.api.InvalidateSingleCache;
import com.google.code.ssm.api.ParameterValueKeyProvider;
import com.google.code.ssm.api.ReadThroughMultiCache;

/**
 * Class Name: UserGroupRefMapper <br>
 * Description: This interface corresponds to the table - FND_USER_GROUP_REF <br>
 * Create Date: 2015-08-15 11:30:16 <br>
 */
public interface UserGroupRefMapper {
	/**
	 * Method: deleteByPrimaryKey(...) <br/>
	 * Delete record from table - FND_USER_GROUP_REF<br/>
	 * Param: the key paremeter can not empty. <br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_USER_GROUP_REF<br/>
	 * 2: UserGroupRefService call this method, then the realization method
	 * calls UserGroupRefMapper.xml to delete from database.<br/>
	 * 3: throws DataAccessException exception <br/>
	 * Remarks: If the method executed successfully, need to be removed
	 * UserGroupRef object from memory cache Create Date: 2015-08-15 11:30:16
	 */
	@InvalidateSingleCache(namespace = "UserGroupRef")
	int deleteByPrimaryKey(@ParameterValueKeyProvider UserGroupRefKey key) throws DataAccessException;

	int deleteByUserId(String userId) throws DataAccessException;

	/**
	 * Method: insertSelective(...) <br/>
	 * Insert a record to table - FND_USER_GROUP_REF<br/>
	 * Param: record, the paremeter can not empty, for details please to see
	 * UserGroupRefKey.java model file.<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_USER_GROUP_REF<br/>
	 * 2: UserGroupRefService call this method, then the realization method
	 * calls UserGroupRefMapper.xml to add record into database.<br/>
	 * 3: throws DataAccessException exception <br/>
	 * Create Date: 2015-08-15 11:30:16
	 */
	@CachePut(value = "UserGroupRef")
	int insertSelective(UserGroupRefKey record) throws DataAccessException;

	int insertSelectiveBatch(List<UserGroupRefKey> items) throws DataAccessException;

	/**
	 * Method: searchAll(...) <br/>
	 * Select some records from table - FND_USER_GROUP_REF <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_USER_GROUP_REF <br/>
	 * 2: UserGroupRefService call this method, then the realization method
	 * calls UserGroupRefMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get UserGroupRef correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	@ReadThroughMultiCache(namespace = "UserGroupRef", expiration = 30)
	List<UserGroupRefKey> searchAll(UserGroupRefKey record) throws DataAccessException;

	/**
	 * Method: searchAllByPage(...) <br/>
	 * Select some records from table by page- FND_USER_GROUP_REF <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_USER_GROUP_REF <br/>
	 * 2: UserGroupRefService call this method, then the realization method
	 * calls UserGroupRefMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get UserGroupRef correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	@ReadThroughMultiCache(namespace = "UserGroupRef", expiration = 30)
	List<UserGroupRefKey> searchAllByPage(Map<String, Object> map) throws DataAccessException;

	/**
	 * Method: selectAll(...) <br/>
	 * Select some records from table - FND_USER_GROUP_REF <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_USER_GROUP_REF <br/>
	 * 2: UserGroupRefService call this method, then the realization method
	 * calls UserGroupRefMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get UserGroupRef correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	@ReadThroughMultiCache(namespace = "UserGroupRef", expiration = 30)
	List<UserGroupRefKey> selectAll(UserGroupRefKey record) throws DataAccessException;

	/**
	 * Method: selectAllByPage(...) <br/>
	 * Select some records from table by page- FND_USER_GROUP_REF <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_USER_GROUP_REF <br/>
	 * 2: UserGroupRefService call this method, then the realization method
	 * calls UserGroupRefMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get UserGroupRef correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	@ReadThroughMultiCache(namespace = "UserGroupRef", expiration = 30)
	List<UserGroupRefKey> selectAllByPage(Map<String, Object> map) throws DataAccessException;

	/**
	 * Method: selectCount(...) <br/>
	 * Select some records count from table - FND_USER_GROUP_REF <br/>
	 * Param: the record paremeter can be empty. If paremeter = null then return
	 * all records count<br/>
	 * Description: <br/>
	 * 1: This method corresponds to the database table FND_USER_GROUP_REF <br/>
	 * 2: UserGroupRefService call this method, then the realization method
	 * calls UserGroupRefMapper.xml to get record from database. <br/>
	 * 3: @ReadThroughMultiCache(namespace = "cache object name", expiration =
	 * cache expiration time(s) ) <br/>
	 * 4: throws DataAccessException exception <br/>
	 * Remarks: When the query set, first get UserGroupRef correspondence from
	 * the cache, such as the cache does not exist, <br/>
	 * then the query from the database, and stores the results into the cache.
	 * Create Date: 2015-08-15 11:30:16
	 */
	int selectCount(UserGroupRefKey record) throws DataAccessException;
}